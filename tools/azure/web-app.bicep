@description('Name of the existing Key Vault containing application secrets')
param keyVaultName string

param location string = resourceGroup().location
param prefix string = 'ezcv'
@allowed([
  'latest'
  'beta'
  'prod'
])
param dockerTag string = 'latest'

@description('Container webapp resource name')
param name string = '${prefix}-${dockerTag}-container-webapp'

@description(' access_token_secret & refresh_token_secret, replace with a real token in the .bicepparam files')
@secure()
param ACCESS_TOKEN_SECRET string = 'access_token_secret'
@secure()
param REFRESH_TOKEN_SECRET string =   'refresh_token_secret'

@description('chrome token and port, replace with a real token in the .bicepparam files, used for the chromio module and is needed in webapp')
@secure()
param CHROME_TOKEN string = 'chrome_token'
param CHROME_PORT string = '8080' 
param CHROME_URL string

// App Service Plan
resource serverFarm 'Microsoft.Web/serverfarms@2024-04-01' = {
  name: '${prefix}-ASP-${dockerTag}'
  location: location
  sku: {
    name: 'B3'
    tier: 'Basic'
    size: 'B3'
    family: 'B'
    capacity: 1
  }
  properties: {
    reserved: true
    perSiteScaling: false
    maximumElasticWorkerCount: 1
  }
}

// Web App with system-assigned identity for Key Vault access
resource sites 'Microsoft.Web/sites@2024-04-01' = {
  name: name
  location: location
  tags: {
    'hidden-link: /app-insights-resource-id': '/subscriptions/d3730832-4250-4e51-b454-680e31182cd4/resourceGroups/EzCV/providers/microsoft.insights/components/EzCV-webapp-2'
    'hidden-link: /app-insights-instrumentation-key': '330b0fb6-6ddd-4c0f-a588-718399c6d827'
    'hidden-link: /app-insights-conn-string': 'InstrumentationKey=330b0fb6-6ddd-4c0f-a588-718399c6d827;IngestionEndpoint=https://northeurope-2.in.applicationinsights.azure.com/;LiveEndpoint=https://northeurope.livediagnostics.monitor.azure.com/;ApplicationId=5b1af7cd-49b5-4cdc-9157-29af8a11474d'
  }
  kind: 'app,linux,container'
  properties: {
    enabled: true
    serverFarmId: serverFarm.id
    reserved: true
    isXenon: false
    hyperV: false
    dnsConfiguration: {}
    vnetRouteAllEnabled: false
    vnetImagePullEnabled: false
    vnetContentShareEnabled: false
    siteConfig: {
      numberOfWorkers: 1
      linuxFxVersion: 'DOCKER|mfknudsen/ez-cv:${dockerTag}' 
      acrUseManagedIdentityCreds: false
      alwaysOn: false
      http20Enabled: false
      functionAppScaleLimit: 0
      minimumElasticInstanceCount: 1
    }
    scmSiteAlsoStopped: false
    clientAffinityEnabled: false
    clientCertEnabled: false
    clientCertMode: 'Required'
    hostNamesDisabled: false
    ipMode: 'IPv4'
    vnetBackupRestoreEnabled: false
    customDomainVerificationId: '9B42C5BA2C3D4B566F0D11A198C4B9F5288000D33B9993E9988BE0D3AB475803'
    containerSize: 0
    dailyMemoryTimeQuota: 0
    httpsOnly: true
    endToEndEncryptionEnabled: false
    redundancyMode: 'None'
    publicNetworkAccess: 'Enabled'
    storageAccountRequired: false
    keyVaultReferenceIdentity: 'SystemAssigned'
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
  }
}

// Enable FTP and SCM publishing
resource ftp 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2024-04-01' = {
  parent: sites
  name: 'ftp'
  properties: {
    allow: true
  }
}

resource scm 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2024-04-01' = {
  parent: sites
  name: 'scm'
  properties: {
    allow: true
  }
}

// App settings with runtime Key Vault references for secrets
resource dockerApp 'Microsoft.Web/sites/config@2024-04-01' = {
  parent: sites
  name: 'web'
  properties: {
    appSettings: [
      // Runtime retrieval of secrets
      { name: 'ACCESS_TOKEN_SECRET',                           value: ACCESS_TOKEN_SECRET }
      { name: 'APPLICATIONINSIGHTS_CONNECTION_STRING',         value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/APPLICATIONINSIGHTS-CONNECTION-STRING)' } 
      { name: 'ApplicationInsightsAgent_EXTENSION_VERSION',    value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/ApplicationInsightsAgent-EXTENSION-VERSION)' } 
      { name: 'AZURE_ACCOUNT_KEY',                             value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/AZURE-ACCOUNT-KEY)' } 
      { name: 'AZURE_ACCOUNT_NAME',                            value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/AZURE-ACCOUNT-NAME)' } 
      { name: 'AZURE_STORAGE_CONTAINER',                       value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/AZURE-STORAGE-CONTAINER)' } 
      { name: 'CHROME_TOKEN',                                  value: CHROME_TOKEN }
      { name: 'CHROME_PORT',                                   value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/CHROME-PORT)' } 
      { name: 'CHROME_URL',                                    value: CHROME_URL }
      { name: 'DATABASE_URL',                                  value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/DATABASE-URL)' } 
      { name: 'DOCKER_ENABLE_CI',                              value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/DOCKER-ENABLE-CI)' } 
      { name: 'DOCKER_REGISTRY_SERVER_USERNAME',               value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/DOCKER-REGISTRY-SERVER-USERNAME)' } 
      { name: 'DOCKER_REGISTRY_SERVER_PASSWORD',               value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/DOCKER-REGISTRY-SERVER-PASSWORD)' } 
      { name: 'DOCKER_REGISTRY_SERVER_URL',                    value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/DOCKER-REGISTRY-SERVER-URL)' } 
      //{ name: 'GITHUB_CALLBACK_URL',                           value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/GITHUB-CALLBACK-URL)' }
      //{ name: 'GITHUB_CLIENT_ID',                              value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/GITHUB-CLIENT-ID)' }
      //{ name: 'GITHUB_CLIENT_SECRET',                          value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/GITHUB-CLIENT-SECRET)' }
      //{ name: 'GOOGLE_CALLBACK_URL',                           value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/GOOGLE-CALLBACK-URL)' }
      //{ name: 'GOOGLE_CLIENT_ID',                              value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/GOOGLE-CLIENT-ID)' }
      //{ name: 'GOOGLE_CLIENT_SECRET',                          value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/GOOGLE-CLIENT-SECRET)' }
      //{ name: 'MICROSOFT_AUTHORIZATION_URL',                   value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/MICROSOFT-AUTHORIZATION-URL)' }
      //{ name: 'MICROSOFT_CALLBACK_URL',                        value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/MICROSOFT-CALLBACK-URL)' }
      //{ name: 'MICROSOFT_CLIENT_ID',                           value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/MICROSOFT-CLIENT-ID)' }
      //{ name: 'MICROSOFT_CLIENT_SECRET',                       value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/MICROSOFT-CLIENT-SECRET)' }
      //{ name: 'MICROSOFT_SCOPE',                               value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/MICROSOFT-SCOPE)' }
      //{ name: 'MICROSOFT_TOKEN_URL',                           value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/MICROSOFT-TOKEN-URL)' }
      //{ name: 'MICROSOFT_USER_INFO_URL',                       value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/MICROSOFT-USER-INFO-URL)' }
      { name: 'AZURE_OPENAI_API_KEY',                          value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/AZURE-OPENAI-API-KEY)' }
      { name: 'AZURE_OPENAI_ENDPOINT',                         value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/AZURE-OPENAI-ENDPOINT)' }
      { name: 'OPENAI_MODEL',                                  value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/OPENAI_MODEL)' }
      { name: 'POSTGRES_DB',                                   value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/POSTGRES-DB)' } 
      { name: 'POSTGRES_USER',                                 value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/POSTGRES-USER)' } 
      { name: 'POSTGRES_PASSWORD',                             value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/POSTGRES-PASSWORD)' } 
      { name: 'POSTGRES_PORT',                                 value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/POSTGRES-PORT)' } 
      { name: 'REFRESH_TOKEN_SECRET',                          value:  REFRESH_TOKEN_SECRET } 
      { name: 'STORAGE_ACCESS_KEY',                            value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/STORAGE-ACCESS-KEY)' } 
      { name: 'STORAGE_BUCKET',                                value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/STORAGE-BUCKET)' }   
      { name: 'STORAGE_ENDPOINT',                              value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/STORAGE-ENDPOINT)' }   
      { name: 'STORAGE_SECRET_KEY',                            value: '@Microsoft.KeyVault(SecretUri=https://${keyVaultName}.vault.azure.net/secrets/STORAGE-SECRET-KEY)' } 
      { name: 'PUBLIC_URL',                                    value: 'https://${sites.properties.defaultHostName}' } 
    ]
  }
}

output webAppURL string = sites.properties.defaultHostName
output serverFarmId string = serverFarm.id
